# -*- coding: utf-8 -*-
"""Yolov4Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ar48TFKsSZeuEJNHPQ9Jyms9fCRZvdHp
"""

# clone darknet repo
!git clone https://github.com/AlexeyAB/darknet

# Commented out IPython magic to ensure Python compatibility.
# %cd darknet

# change makefile to have GPU and OPENCV enabled
!sed -i 's/OPENCV=0/OPENCV=1/' Makefile
!sed -i 's/GPU=0/GPU=1/' Makefile
!sed -i 's/CUDNN=0/CUDNN=1/' Makefile
!sed -i 's/CUDNN_HALF=0/CUDNN_HALF=1/' Makefile

!sed -i 's/LIBSO=0/LIBSO=1/' Makefile

# verify CUDA
!/usr/local/cuda/bin/nvcc --version

# make darknet (builds darknet so that you can then use the darknet executable file to run or train object detectors)
!make

!./darknet

# Commented out IPython magic to ensure Python compatibility.
# %cd ..
from google.colab import drive
drive.mount('/content/gdrive')

# Commented out IPython magic to ensure Python compatibility.
# %cd darknet

!./darknet detector test /content/gdrive/MyDrive/content/bdd100k/bdd100k.data /content/gdrive/MyDrive/content/bdd100k/Yolov4_tiny_changes_testing1.cfg /content/gdrive/MyDrive/content/bdd100k/backup/Yolov4_tiny_changes_best.weights /content/gdrive/MyDrive/content/bdd100k/images/100k/test/cabe1040-c59cb390.jpg -thesh 0.2 -ext_output

!chmod +x ./darknet/darknet.py

# Commented out IPython magic to ensure Python compatibility.
# define helper function imShow
def imShow(path):
  import cv2
  import matplotlib.pyplot as plt
#   %matplotlib inline

  image = cv2.imread(path)
  height, width = image.shape[:2]
  resized_image = cv2.resize(image,(3*width, 3*height), interpolation = cv2.INTER_CUBIC)

  fig = plt.gcf()
  fig.set_size_inches(15, 15)
  plt.axis("off")
  plt.imshow(cv2.cvtColor(resized_image, cv2.COLOR_BGR2RGB))
  plt.show()

imShow('/content/darknet/predictions.jpg')

!./darknet/darknet detector test /content/gdrive/MyDrive/content/bdd100k/bdd100k.data /content/gdrive/MyDrive/content/Yolov4_tiny_changes.cfg /content/gdrive/MyDrive/content/bdd100k/backup/Yolov4_tiny_changes_last.weights /content/gdrive/MyDrive/content/bdd100k/images/100k/test/cabc30fc-e7726578.jpg -thresh 0.3
#imShow(/content/predictions.jpg)

!./darknet detector demo /content/gdrive/MyDrive/content/bdd100k/bdd100k.data  /content/gdrive/MyDrive/content/Yolov4_tiny_changes.cfg /content/gdrive/MyDrive/content/bdd100k/backup/Yolov4_tiny_changes_last.weights -dont_show /content/gdrive/MyDrive/content/bdd100k/Traffic.mp4 -i 0 -out_filename /content/gdrive/MyDrive/content/bdd100k/results.avi

imShow(predictions.jpg)

!unzip '/content/gdrive/MyDrive/bdd100k.zip' -d '/content/'

!mv content/bdd100k /content/

!wget https://github.com/AlexeyAB/darknet/releases/download/darknet_yolo_v3_optimal/yolov4.conv.137

# Commented out IPython magic to ensure Python compatibility.
# train your custom detector! (uncomment %%capture below if you run into memory issues or your Colab is crashing)
#%%capture
# %cd darknet
!./darknet detector train /content/gdrive/MyDrive/content/bdd100k/bdd100k.data /content/gdrive/MyDrive/content/Yolov4_tiny_changes.cfg /content/gdrive/MyDrive/content/bdd100k/backup/Yolov4_tiny_changes_last.weights -dont_show -map

!wget /content/gdrive/MyDrive/AIMLProject/content/bdd100k/images/100k/train/81-b273f586.jpg

/content/gdrive/MyDrive/content/bdd100k/backup

!ls /content/gdrive/MyDrive/content/bdd100k/images/100k/train | wc -l

!unzip '/content/gdrive/MyDrive/AIMLProject/train.zip' -d '/content/gdrive/MyDrive/AIMLProject/content/bdd100k/images/100k'

!ls /content/gdrive/MyDrive/AIMLProject/content/bdd100k/images/100k/val | wc -l

import cv2
cv2.__version__

!python /content/darknet/darknet.py

!wget https://github.com/AlexeyAB/darknet/releases/download/darknet_yolo_v3_optimal/yolov4.weights

!./darknet/darknet detector test /content/gdrive/MyDrive/content/bdd100k/bdd100k.data /content/gdrive/MyDrive/content/bdd100k/Yolov4_tiny_changes_testing1.cfg /content/darknet/yolov4.weights /content/sample_data/cabc30fc-fd79926f.jpg -thesh 0.2 -ext_output

!git clone https://github.com/pranjalAI/tensorflow-yolov4-tflite.git

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/tensorflow-yolov4-tflite/

!ls

!python save_model.py --weights /content/gdrive/MyDrive/content/bdd100k/backup/Yolov4_tiny_changes_10000.weights --output /content/gdrive/MyDrive/content/bdd100k --input_size 416 --model yolov4 --tiny

!ls /content/gdrive/MyDrive/content/bdd100k/assets

import numpy as np
from flask import Flask, request, jsonify, render_template
import pickle

app = Flask(__name__)
model = pickle.load(open('model.pkl', 'rb'))

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/predict',methods=['POST'])
def predict():

    int_features = [int(x) for x in request.form.values()]
    final_features = [np.array(int_features)]
    prediction = model.predict(final_features)

    output = round(prediction[0], 2)

    return render_template('/content/gdrive/MyDrive/content/code.html', prediction_text='Sales should be $ {}'.format(output))

@app.route('/results',methods=['POST'])
def results():

    data = request.get_json(force=True)
    prediction = model.predict([np.array(list(data.values()))])

    output = prediction[0]
    return jsonify(output)

if __name__ == "__main__":
    app.run(debug=True)